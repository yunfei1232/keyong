import math
import random, time
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime

# 定义城市坐标和距离矩阵
cities = {
    "city1": (104.07, 30.67),
    "city2": (106.33, 29.35),
    "city3": (110.30, 29.20),
    "city4": (111.28, 30.69),
    "city5": (112.98, 28.19),
    "city6": (113.53, 29.42),
    "city7": (115.90, 28.68),
    "city8": (117.27, 31.86),
    "city9": (118.37, 31.32),
    "city10": (118.79, 32.06),
    "city11": (120.21, 30.24),
    "city12": (121.48, 31.22)
}

# 定义城市之间的航空运输距离和铁路运输距离（以公里为单位）以及每单位的运输成本
transport_distances = {
    ("city1", "city2"): {"air": 0, "rail": 361},
    ("city1", "city3"): {"air": 695, "rail": 0},
    ("city1", "city4"): {"air": 870, "rail": 0},
    ("city1", "city5"): {"air": 940, "rail": 0},
    ("city1", "city6"): {"air": 1047, "rail": 0},
    ("city1", "city7"): {"air": 1240, "rail": 0},
    ("city1", "city8"): {"air": 1392, "rail": 0},
    ("city1", "city9"): {"air": 1528, "rail": 0},
    ("city1", "city10"): {"air": 1618, "rail": 0},
    ("city1", "city11"): {"air": 1699, "rail": 0},
    ("city1", "city12"): {"air": 1782, "rail": 0},
    ("city2", "city3"): {"air": 0, "rail": 591},
    ("city2", "city4"): {"air": 0, "rail": 642},
    ("city2", "city5"): {"air": 695, "rail": 890},
    ("city2", "city6"): {"air": 801, "rail": 954},
    ("city2", "city7"): {"air": 970, "rail": 1279},
    ("city2", "city8"): {"air": 1146, "rail": 0},
    ("city2", "city9"): {"air": 1419, "rail": 1409},
    ("city2", "city10"): {"air": 1305, "rail": 0},
    ("city2", "city11"): {"air": 1500, "rail": 0},
    ("city2", "city12"): {"air": 1537, "rail": 0},
    ("city3", "city5"): {"air": 0, "rail": 329},
    ("city3", "city7"): {"air": 0, "rail": 746},
    ("city3", "city10"): {"air": 970, "rail": 0},
    ("city3", "city12"): {"air": 1366, "rail": 0},
    ("city4", "city5"): {"air": 0, "rail": 455},
    ("city4", "city6"): {"air": 0, "rail": 334},
    ("city4", "city8"): {"air": 0, "rail": 667},
    ("city4", "city9"): {"air": 0, "rail": 789},
    ("city4", "city10"): {"air": 0, "rail": 820},
    ("city5", "city7"): {"air": 0, "rail": 417},
    ("city5", "city8"): {"air": 0, "rail": 746},
    ("city5", "city9"): {"air": 0, "rail": 868},
    ("city5", "city10"): {"air": 799, "rail": 899},
    ("city5", "city11"): {"air": 805, "rail": 0},
    ("city5", "city12"): {"air": 964, "rail": 0},
    ("city6", "city9"): {"air": 0, "rail": 482},
    ("city6", "city10"): {"air": 0, "rail": 513},
    ("city6", "city11"): {"air": 656, "rail": 0},
    ("city6", "city12"): {"air": 761, "rail": 0},
    ("city7", "city8"): {"air": 0, "rail": 462},
    ("city7", "city9"): {"air": 0, "rail": 451},
    ("city7", "city10"): {"air": 0, "rail": 572},
    ("city7", "city11"): {"air": 0, "rail": 644},
    ("city8", "city9"): {"air": 0, "rail": 129},
    ("city8", "city10"): {"air": 0, "rail": 156},
    ("city8", "city11"): {"air": 0, "rail": 396},
    ("city9", "city10"): {"air": 0, "rail": 121},
    ("city9", "city11"): {"air": 0, "rail": 267},
    ("city10", "city12"): {"air": 0, "rail": 300},
    ("city11", "city12"): {"air": 0, "rail": 203},
}

# 假设的飞机起飞窗口
flight_takeoff_windows = {
    'city1_to_city3': (11, 12),  # 8点到21点，每小时一个航班
    'city1_to_city4': (12, 13),  # 14点到15点，可能只有14点这一个航班
    'city1_to_city5': (7, 22),  # 7点到21点，每小时一个航班
    'city1_to_city6': (8, 18),  # 7点到19点，每小时一个航班
    'city1_to_city7': (16, 17),  # 6点到19点，每小时一个航班
    'city1_to_city8': (6, 13),  # 6点到19点，每小时一个航班
    'city1_to_city9': (14, 15),  # 6点到19点，每小时一个航班
    'city1_to_city10': (7, 18),  # 6点到19点，每小时一个航班
    'city1_to_city11': (7, 21),  # 6点到19点，每小时一个航班
    'city1_to_city12': (8, 20),  # 6点到19点，每小时一个航班
    'city2_to_city5': (7, 22),  # 6点到19点，每小时一个航班
    'city2_to_city6': (10, 22),  # 6点到19点，每小时一个航班
    'city2_to_city7': (14, 15),  # 6点到19点，每小时一个航班
    'city2_to_city9': (9, 10),  # 6点到19点，每小时一个航班
    'city2_to_city10': (7, 22),  # 6点到19点，每小时一个航班
    'city2_to_city11': (7, 11),  # 6点到19点，每小时一个航班
    'city2_to_city12': (5, 21),  # 6点到19点，每小时一个航班
    'city3_to_city10': (20, 21),  # 6点到19点，每小时一个航班
    'city5_to_city10': (8, 21),  # 6点到19点，每小时一个航班
    'city5_to_city11': (8, 23),  # 6点到19点，每小时一个航班
    'city5_to_city12': (8, 18),  # 6点到19点，每小时一个航班
    'city6_to_city11': (15, 18),  # 6点到19点，每小时一个航班
    'city6_to_city12': (8, 19),  # 6点到19点，每小时一个航班
}

rail_timetable_windows = {
    'city1_to_city2': (6, 22),  # 8点到21点，每小时一个航班
    'city2_to_city3': (8, 12),  # 14点到15点，可能只有14点这一个航班
    'city2_to_city4': (6, 16),  # 7点到21点，每小时一个航班
    'city2_to_city5': (8, 17),  # 7点到19点，每小时一个航班
    'city2_to_city6': (6, 18),  # 6点到19点，每小时一个航班
    'city2_to_city7': (6, 20),  # 6点到19点，每小时一个航班
    'city2_to_city9': (7, 12),  # 6点到19点，每小时一个航班
    'city3_to_city5': (6, 21),  # 6点到19点，每小时一个航班
    'city3_to_city7': (7, 8),  # 6点到19点，每小时一个航班
    'city4_to_city5': (6, 23),  # 6点到19点，每小时一个航班
    'city4_to_city6': (6, 22),  # 6点到19点，每小时一个航班
    'city4_to_city8': (6, 21),  # 6点到19点，每小时一个航班
    'city4_to_city9': (6, 21),  # 6点到19点，每小时一个航班
    'city4_to_city10': (6, 16),  # 6点到19点，每小时一个航班
    'city5_to_city7': (4, 21),  # 6点到19点，每小时一个航班
    'city5_to_city8': (7, 19),  # 6点到19点，每小时一个航班
    'city5_to_city9': (11, 15),  # 6点到19点，每小时一个航班
    'city5_to_city10': (7, 18),  # 6点到19点，每小时一个航班
    'city6_to_city9': (7, 18),  # 6点到19点，每小时一个航班
    'city6_to_city10': (6, 19),  # 6点到19点，每小时一个航班
    'city7_to_city8': (5, 23),  # 6点到19点，每小时一个航班
    'city7_to_city9': (7, 23),  # 6点到19点，每小时一个航班
    'city7_to_city10': (7, 23),  # 6点到19点，每小时一个航班
    'city7_to_city11': (7, 23),  # 6点到19点，每小时一个航班
    'city8_to_city9': (7, 23),  # 6点到19点，每小时一个航班
    'city8_to_city10': (2, 22),  # 6点到19点，每小时一个航班
    'city8_to_city11': (2, 23),  # 6点到19点，每小时一个航班
    'city9_to_city10': (0, 23),  # 6点到19点，每小时一个航班
    'city9_to_city11': (0, 23),  # 6点到19点，每小时一个航班
    'city10_to_city12': (0, 22),  # 6点到19点，每小时一个航班
    'city11_to_city12': (1, 23),  # 6点到19点，每小时一个航班
}

# 定义给定的变量
air_transport_cost_per_km = 3.31  # 航空每公里成本，单位：元/吨·公里
rail_transport_cost_per_km = 0.05  # 铁路每公里成本，单位：元/吨·公里
air_speed_km_per_hour = 840  # 航空速度，单位：公里/小时
rail_speed_km_per_hour = 70  # 铁路速度，单位：公里/小时
cargo_weight = 6  # 货物重量，单位：吨

inter_rail_transfer_cost = 0  # 铁路间转运成本，单位：元/吨
inter_modal_transfer_cost = 0.23  # 不同模式间转运成本，单位：元/吨
inter_air_transfer_cost = 0  # 航空间转运成本，单位：元/吨

rail_co2_emission_per_km_per_ton = 0.033  # 铁路每公里每吨碳排放，单位：千克/吨·公里
air_co2_emission_per_km_per_ton = 0.973  # 航空每公里每吨碳排放，单位：千克/吨·公里

inter_rail_co2_emission_per_ton = 0  # 铁路转运之间的碳排放量，单位：千克/吨
inter_air_co2_emission_per_ton = 0.806  # 航空转运之间的碳排放量，单位：千克/吨
inter_modal_co2_emission_per_ton = 0  # 不同模式间转运碳排放量，单位：千克/吨

storage_cost_per_hour = 500  # 储藏成本每小时
penalty_cost_per_hour = 1000  # 超时惩罚成本每小时

# 创建城市列表
cities_list = [city for pair in transport_distances.keys() for city in pair]
cities_list = list(set(cities_list))  # 去重

# 建立城市到索引的映射和索引到城市的映射
city_to_index = {city: i for i, city in enumerate(cities_list)}
index_to_city = {i: city for i, city in enumerate(cities_list)}


# 定义一个函数来获取两个城市之间的运输信息
def get_transport_info(city1, city2):
    if (city1, city2) in transport_distances:
        info = transport_distances[(city1, city2)]
        air_distance = info.get("air", 0)
        rail_distance = info.get("rail", 0)
        mode = "air" if air_distance > 0 else "rail"
        distance = air_distance if air_distance > 0 else rail_distance
        time = distance / air_speed_km_per_hour if air_distance > 0 else distance / rail_speed_km_per_hour
        cost = distance * (air_transport_cost_per_km if mode == "air" else rail_transport_cost_per_km) * cargo_weight
        return mode, distance, time, cost
    return "none", 0, 0, 0


def sigmoid(x):
    return 1 / (1 + math.exp(-x))


def evaluate_individual(path, time_weight, cost_weight, co2_emission_weight):
    """评估个体的函数，返回评估分数。可以根据实际情况调整评估逻辑。"""
    total_distance, total_cost, total_time, total_co2_emission, _, _, _, _, _, _, _, _ = calculate_total_distance_cost_and_time(
        path)

    # 归一化时间、成本和二氧化碳排放量
    normalized_total_time = sigmoid(total_time)
    normalized_total_cost = sigmoid(total_cost)
    normalized_total_co2_emission = sigmoid(total_co2_emission)

    # 根据权重计算综合评分
    score = (
                normalized_total_time + normalized_total_cost + normalized_total_co2_emission)

    return score

def generate_individual():
    path = ["city1"]
    current_city = "city1"
    visited_cities = set([current_city])

    while current_city != "city12":
        next_city_candidates = [
            city for city in cities_list
            if city not in visited_cities
               and int(city.replace("city", "")) > int(current_city.replace("city", ""))
               and ((current_city, city) in transport_distances or (city, current_city) in transport_distances)
               and (get_transport_info(current_city, city)[0] != "none")
        ]

        if not next_city_candidates:
            break

        next_city = random.choice(next_city_candidates)
        path.append(next_city)
        visited_cities.add(next_city)
        current_city = next_city

    if path[-1] == "city12":  # 确保路径有效
        return path
    else:
        # 如果最终路径不是有效的（没有到达city12），这里返回None或者可以选择返回一个部分路径，这取决于你的需求
        return None


# 计算超时的惩罚成本
def calculate_additional_cost(total_time, cargo_weight):
    if total_time < 16:
        # 计算少于15小时的储藏成本
        under_time_hours = 16 - total_time
        return math.ceil(under_time_hours) * storage_cost_per_hour * cargo_weight
    elif total_time > 36:
        # 计算超过30小时的惩罚成本
        overtime_hours = math.ceil(total_time - 36)
        return overtime_hours * penalty_cost_per_hour * cargo_weight
    else:
        # 如果在15到30小时之间，没有额外成本
        return 0


# 格式化时间，考虑次日情况
def format_time(hour_decimal):
    hours = int(hour_decimal) % 24  # 小时数，对24取余
    minutes = int((hour_decimal - int(hour_decimal)) * 60)  # 分钟数
    next_day_prefix = "" if hour_decimal < 24 else "次日 "
    return f"{next_day_prefix}{hours:02d}:{minutes:02d}"


# 对等待时间做修改
def adjust_departure_for_flight_takeoff_window(city1, city2, current_time, departure_windows):
    key = f'{city1}_to_{city2}'
    window = departure_windows.get(key, None)
    if window:
        start_hour, end_hour = window
        if not (start_hour <= current_time < end_hour):
            if current_time < start_hour:
                waiting_time = start_hour - current_time
            else:
                waiting_time = (24 - current_time) + start_hour
            current_time = (current_time + waiting_time) % 24
            return current_time, waiting_time
    return current_time, 0


# 针对铁路修改等待时间
def adjust_departure_for_rail_timetable_window(city1, city2, arrival_time, rail_timetable_windows):
    key = f'{city1}_to_{city2}'
    window = rail_timetable_windows.get(key, None)
    waiting_time = 0.41  # 除非明确给出，否则这是默认预设的等待时间
    if window:
        start_hour, end_hour = window
        if arrival_time < start_hour:
            waiting_time = start_hour - arrival_time
        elif start_hour <= arrival_time <= end_hour:
            waiting_time = 0
        else:
            waiting_time = 24 - arrival_time + start_hour
        departure_time = (arrival_time + waiting_time) % 24
        return departure_time, waiting_time
    return arrival_time, waiting_time


def calculate_transfer_time(current_mode, next_mode, cargo_weight):
    transfer_time, transfer_cost = 0, 0
    if next_mode == "air":
        if current_mode == "air":
            transfer_time = random.uniform(1.08, 1.5)  # 空运到空运的转运时间
            transfer_cost = inter_air_transfer_cost * cargo_weight  # 空运到空运的转运成本
        else:  # 前一个模式为铁路，下一个模式为空运
            transfer_time = random.uniform(2.25, 2.67)
            transfer_cost = inter_modal_transfer_cost * cargo_weight
    else:  # 下一个模式为铁路
        if current_mode == "air":  # 前一个模式为航空，后一个模式为铁路
            transfer_time = random.uniform(2.8, 3.42)
            transfer_cost = inter_modal_transfer_cost * cargo_weight
        else:  # 铁路到铁路的转运时间
            transfer_time = random.uniform(2.8, 3.42)
            transfer_cost = inter_rail_transfer_cost * cargo_weight
    return transfer_time, transfer_cost

def cal_total_cost(total_time, total_coast):
    adjusted_total_cost = total_coast
    if total_time < 10:
        extra_storage_cost = (10 - total_time) * 5000
        adjusted_total_cost += extra_storage_cost
    elif total_time > 20:
        extra_penalty_cost = (total_time - 20) * 10000
        adjusted_total_cost += extra_penalty_cost
    return adjusted_total_cost

def calculate_total_distance_cost_and_time(path, start_time=9):
    total_distance = 0
    total_cost = 0
    total_co2_emission = 0
    transfer_times = []
    departure_times = [format_time(start_time)]  # Format the initial start time
    waiting_times = []
    transshipment_waiting_times = []
    total_transport_time = 0
    total_transfer_time = 0
    total_waiting_time = 0
    previous_mode = None

    cumulative_time = start_time  # Initialize cumulative time
    transfer_time_c = 0
    for i in range(len(path) - 1):
        current_city = path[i]
        next_city = path[i + 1]
        mode, distance, time, cost = get_transport_info(current_city, next_city)

        if i == 0:  # if it's the first segment, add the initial waiting time to the total waiting time
            initial_waiting_time = random.uniform(0.42, 0.83)
            total_waiting_time += initial_waiting_time
            waiting_times.append(initial_waiting_time)
            transshipment_waiting_times.append(0)
            cumulative_time += initial_waiting_time
        else:
            cumulative_time += transfer_times[-1] + waiting_times[-1] + transshipment_waiting_times[-1]

        # If next mode is "air" or "rail", we adjust the waiting time according to the takeoff windows
        adjusted_waiting_time = 0
        if mode == "air" or mode == "rail":
            adjust_function = adjust_departure_for_flight_takeoff_window if mode == "air" else adjust_departure_for_rail_timetable_window
            departure_windows = flight_takeoff_windows if mode == "air" else rail_timetable_windows
            route_key = f'{current_city}_to_{next_city}'
            if route_key in departure_windows:
                adjusted_time, adjusted_waiting_time = adjust_function(current_city, next_city, cumulative_time,
                                                                       departure_windows)
                cumulative_time = adjusted_time
                if i > 0 or adjusted_waiting_time > 0:  # Add adjusted waiting time if it's greater than the initial waiting time
                    total_waiting_time += max(0, adjusted_waiting_time)  # Add only the positive difference
                    waiting_times[-1] += max(0, adjusted_waiting_time)  # Update the last waiting time
                departure_times[-1] = format_time(cumulative_time)  # Update the last departure time

        total_distance += distance
        total_cost += distance * (
            air_transport_cost_per_km if mode == "air" else rail_transport_cost_per_km) * cargo_weight
        total_co2_emission += air_co2_emission_per_km_per_ton * distance * cargo_weight if mode == "air" else rail_co2_emission_per_km_per_ton * distance * cargo_weight
        total_transport_time += time

        if len(path) == 2:  # if there is direct path from city1 to city12 without any intermediate, we do not need to wait or transfer
            total_waiting_time = 0
            total_transfer_time = 0
            break  # skip the rest calculations
        else:
            if i < len(path) - 2:  # calculate waiting and transshipment times for subsequent segments
                waiting_time_minutes = random.uniform(38, 75) if mode == "air" else random.uniform(25, 50)
                waiting_time = max(waiting_time_minutes / 60, 0.41)  # Make sure it's at least 0.41 hours

                total_waiting_time += waiting_time
                waiting_times.append(waiting_time)

                current_city = path[i]
                next_city = path[i + 1]
                next_segment_key = (current_city, next_city)

                # 计算下一段中的转运等候时间
                next_segment_distances = transport_distances.get(next_segment_key, {})
                next_distance_air = next_segment_distances.get("air", 0)
                next_distance_rail = next_segment_distances.get("rail", 0)
                if next_distance_air > 0:  # 如果下一段旅迹是航空
                    transshipment_waiting_time_minutes = random.uniform(25, 50)
                elif next_distance_rail > 0:  # 如果下一段旅迹是铁路
                    transshipment_waiting_time_minutes = random.uniform(38, 75)
                else:  # 如果没有明确的下一段距离信息，我们可以预设一个默认的等待时间
                    transshipment_waiting_time_minutes = random.uniform(1, 2)  # 设定一个默认的等待时间或任何其他的逻辑

                # 计算转运等待时间
                transshipment_waiting_time = max(transshipment_waiting_time_minutes / 60, 0.166)  # 保证至少等待0.166小时
                transshipment_waiting_time = max(transshipment_waiting_time_minutes / 60, 0.166)  # 保证最少等待 0.166 小时
                total_waiting_time += transshipment_waiting_time
                transshipment_waiting_times.append(transshipment_waiting_time)
                transfer_time, additional_transfer_cost = calculate_transfer_time(previous_mode, mode, cargo_weight)
                transfer_time_c = transfer_time
                total_transfer_time += transfer_time
                transfer_times.append(transfer_time)

        total_cost += inter_air_transfer_cost if mode == "air" else inter_rail_transfer_cost

        cumulative_time += time
        departure_times.append(format_time(cumulative_time))

        previous_mode = mode

    penalty_cost = cargo_weight * storage_cost_per_hour * (total_waiting_time if total_waiting_time < 15 else 0) + \
                   cargo_weight * penalty_cost_per_hour * (total_waiting_time - 15 if total_waiting_time > 15 else 0)
    total_cost += penalty_cost
    usetime = use_time(str(start_time), str(departure_times[0]))
    temp_total_cost = total_cost
    total_time = total_transport_time + total_transfer_time + total_waiting_time
    total_cost_new = cal_total_cost(float(total_time) + float(usetime), float(temp_total_cost))
    return total_distance, total_cost_new, total_time, total_co2_emission, transfer_times, departure_times, waiting_times, transshipment_waiting_times, total_transfer_time, total_waiting_time, total_transport_time, transfer_time_c


class Individual:
    def __init__(self, path):
        self.path = path
        self.fitness = self.evaluate()

    def evaluate(self):
        total_distance, total_cost_new, total_time, total_co2_emission, _, _, _, _, _, _, _, _ = calculate_total_distance_cost_and_time(
            self.path)
        # 使用1-sigmoid的方式进行归一化处理
        normalized_total_time = 1 - sigmoid(total_time)
        normalized_total_cost = 1 - sigmoid(total_cost_new)
        normalized_total_co2_emission = 1 - sigmoid(total_co2_emission)
        score = normalized_total_time + normalized_total_cost + normalized_total_co2_emission
        return score

def crossover(parent1, parent2):
    # 交叉点索引
    crossover_point = random.randint(1, len(parent1) - 2)

    # 生成子代
    child1 = parent1[:crossover_point] + [city for city in parent2 if city not in parent1[:crossover_point]]
    child2 = parent2[:crossover_point] + [city for city in parent1 if city not in parent2[:crossover_point]]

    return child1, child2


def mutate(individual):
    # 随机选择两个位置进行变异
    mutation_points = random.sample(range(1, len(individual.path) - 1), 2)
    # 交换路径中对应位置的城市
    individual.path[mutation_points[0]], individual.path[mutation_points[1]] = individual.path[mutation_points[1]], \
    individual.path[mutation_points[0]]


def select(population, tournament_size):
    # 随机选择 tournament_size 个个体进行比较，选出其中适应度最好的个体
    tournament = random.sample(population, tournament_size)
    return min(tournament, key=lambda x: x.fitness)


def non_dominated_sort(population):
    fronts = [[]]
    for individual in population:
        individual.dominates = set()
        individual.dominated_by = 0
        for other_individual in population:
            if individual.fitness < other_individual.fitness:
                individual.dominates.add(other_individual)
            elif individual.fitness > other_individual.fitness:
                individual.dominated_by += 1
        if individual.dominated_by == 0:
            individual.rank = 0
            fronts[0].append(individual)
    i = 0
    while fronts[i]:
        next_front = []
        for individual in fronts[i]:
            for dominated_individual in individual.dominates:
                dominated_individual.dominated_by -= 1
                if dominated_individual.dominated_by == 0:
                    dominated_individual.rank = i + 1
                    next_front.append(dominated_individual)
        i += 1
        if next_front:
            fronts.append(next_front)
        else:
            break  # 添加此处的逻辑以处理空前沿的情况
    return fronts

def crowding_distance_assignment(fronts):
    for front in fronts:
        if len(front) > 2:
            for individual in front:
                individual.distance = 0

            num_objectives = len(calculate_objectives(front[0]))
            for m in range(num_objectives):
                front.sort(key=lambda x: calculate_objectives(x)[m])

                front[0].distance = float('inf')
                front[-1].distance = float('inf')

                objective_range = front[-1].fitness - front[0].fitness
                if objective_range == 0:
                    continue

                for i in range(1, len(front) - 1):
                    front[i].distance += (calculate_objectives(front[i + 1])[m] - calculate_objectives(front[i - 1])[
                        m]) / objective_range



def contain_wait_time(mode):
    wait_time = 0
    if mode[-2:] == ['rail', 'rail']:
        wait_time = random.uniform(0.63, 1.25)
    elif mode[-2:] == ['air', 'air']:
        wait_time = random.uniform(0.42, 0.83)
    elif mode[-2:] == ['air', 'rail']:
        wait_time = random.uniform(0.42, 0.83)
    elif mode[-2:] == ['rail', 'air']:
        wait_time = random.uniform(0.63, 1.25)
    return wait_time


def contain(mode):
    transfer_time = 0
    if mode[-2:] == ['rail', 'rail']:
        transfer_time = random.uniform(2.8, 3.42)
    elif mode[-2:] == ['air', 'air']:
        transfer_time = random.uniform(1.08, 1.5)
    elif mode[-2:] == ['air', 'rail']:
        transfer_time = random.uniform(2.8, 3.42)
    elif mode[-2:] == ['rail', 'air']:
        transfer_time = random.uniform(2.25, 2.67)
    return transfer_time


def use_time(s, e):
    time_format = "%H"  # 指定时间格式
    time_format2 = "%H:%M"  # 指定时间格式
    start_time = datetime.strptime(s, time_format)  # 指定开始时间
    end_time = datetime.strptime(e, time_format2)  # 指定结束时间
    if end_time < start_time:  # 如果结束时间小于开始时间，说明跨越了一天
        end_time = end_time.replace(day=end_time.day + 1)  # 将结束时间的日期设置为开始时间的第二天
    use_time = (end_time - start_time).total_seconds() / 3600  # 计算时间差并转换为小时
    return use_time


def count_ralation_time(mode):
    ralation_time = 0
    if mode[-2:] == ['rail', 'rail']:
        ralation_time = random.uniform(0.63, 1.25)
    elif mode[-2:] == ['air', 'air']:
        ralation_time = random.uniform(0.42, 0.83)
    elif mode[-2:] == ['air', 'rail']:
        ralation_time = random.uniform(0.63, 1.25)
    elif mode[-2:] == ['rail', 'air']:
        ralation_time = random.uniform(0.42, 0.83)
    return ralation_time


def calculate_objectives(individual):
    """
    计算个体的目标函数值。
    """
    total_distance, total_cost_new, total_time, total_co2_emission, _, _, _, _, _, _, _, _ = calculate_total_distance_cost_and_time(
        individual.path)
    return [-total_cost_new, -total_time, -total_co2_emission]  # 我们的目标是最小化这些值


def update_population(population, population_size, tournament_size):
    new_population = []
    fronts = non_dominated_sort(population)
    for front in fronts:
        if len(new_population) + len(front) <= population_size:
            new_population.extend(front)
        else:
            crowding_distance_assignment(front)
            front.sort(key=lambda x: (x.rank, -x.distance))
            selected_individuals = front[:population_size - len(new_population)]
            new_population.extend(selected_individuals)
            break
    while len(new_population) < population_size:
        parent1 = select(population, tournament_size)
        parent2 = select(population, tournament_size)
        child1, child2 = crossover(parent1.path, parent2.path)
        mutate(child1)
        mutate(child2)
        new_population.extend([Individual(child1), Individual(child2)])
    return new_population


def genetic_algorithm(population_size, num_generations, tournament_size):
    # 初始化种群
    population = [Individual(generate_individual()) for _ in range(population_size)]
    for _ in range(num_generations):
        population = update_population(population, population_size, tournament_size)
    return population

# 主程序
if __name__ == "__main__":
    # 定义参数
    city_list = ["city1", "city2", "city3", "city4", "city5", "city6", "city7", "city8", "city9", "city10", "city11",
                 "city12"]
    population_size = 300  # 种群大小
    num_generations = 100  # 迭代次数或生成的数量，遗传算法的运行轮数
    tournament_size = 0

    # 初始化一个列表来存储所有运行的Pareto解集
    all_pareto_solutions = []

    # 运行算法8次
    for run in range(20):
        pareto_front = genetic_algorithm(population_size, num_generations, tournament_size)
        # 将当前运行的Pareto解集添加到总列表中
        all_pareto_solutions.extend(pareto_front)

    # 对所有解进行去重。这里我们使用字典来存储唯一的路径作为键，以及对应的个体作为值
    unique_solutions = {}
    for individual in all_pareto_solutions:
        # 使用路径作为唯一性检查的基准
        path_tuple = tuple(individual.path)
        if path_tuple not in unique_solutions:
            unique_solutions[path_tuple] = individual
        else:
            # 如果已有该路径，选择适应度更高的个体保留
            if individual.fitness > unique_solutions[path_tuple].fitness:
                unique_solutions[path_tuple] = individual

    # 从字典中提取去重后的Pareto解集，并按适应度由高到低排序
    final_pareto_solutions = sorted(unique_solutions.values(), key=lambda x: x.fitness, reverse=True)

    # 输出 Pareto 最优解集
    print("Pareto 最优解集：")
    # 收集用于绘图的数据
    transport_times = []  # 运输总时间
    transport_costs = []  # 运输总成本
    co2_emissions = []  # 碳排放量

    # for individual in final_pareto_solutions:
    for index, individual in enumerate(final_pareto_solutions):
        # if index == len(final_pareto_solutions) - 1:
        # continue  # 跳过最后一次迭代
        temp_total_time = 0
        print(f"路径: {individual.path}, 适应度: {individual.fitness}")

        # 计算当前 Pareto 最优解的运输总成本、运输总距离和运输总时间
        # total_distance, total_cost, total_time, total_co2_emission,  _, _, _, _, _, departure_times, total_transport_time = calculate_total_distance_cost_and_time(
        # individual.path, start_time=9)

        # 这里定义出发时间为21
        start_time = 9
        total_distance, total_cost, total_time, total_co2_emission, _, departure_times, _, _, _, _, total_transport_time, _ = calculate_total_distance_cost_and_time(
            individual.path, start_time=start_time)
        print("从城市1开始运输的起始时间：", departure_times)
        # 输出运输总成本、运输总距离和运输总时间
        print(f"运输总成本: {total_cost} 元")
        print(f"运输总距离: {total_distance} 公里")
        print(f"运输总时间: {total_time} 小时")
        print(f"行程总时间: {total_transport_time} 小时")
        print(f"运输总碳排放: {total_co2_emission} 千克")
        temp_total_time = total_time
        temp_total_cost = total_cost
        transport_times.append(total_time)
        transport_costs.append(total_cost)
        co2_emissions.append(total_co2_emission)

        # 计算并输出当前 Pareto 最优解的详细信息
        best_path_indices = [city_to_index[city] for city in individual.path]
        best_path_cities = [index_to_city[index] for index in best_path_indices]
        total_distance, total_cost, total_time, total_co2_emission, transfer_times, departure_times, waiting_times, transshipment_waiting_times, total_transfer_time, total_waiting_time, total_transport_time, tranfer_time = calculate_total_distance_cost_and_time(
            individual.path, start_time=start_time)
        usetime = use_time(str(start_time), str(departure_times[0]))
        print(f"运输总时间(新): {float(temp_total_time) + float(usetime)} 小时")
        total_cost_new = cal_total_cost(float(temp_total_time) + float(usetime), float(temp_total_cost))
        print(f"运输总成本(新): {total_cost_new} 元")
        print("最佳路径详细信息:")
        temp_waiting_time = 0
        temp_transshipment_waiting_time = 0
        mode_all = []
        temp_mode = []
        transfer_time_str = 0
        for j in range(len(best_path_cities) - 1):

            city1, city2 = best_path_cities[j], best_path_cities[j + 1]
            mode, distance, time, cost = get_transport_info(city1, city2)
            departure_time = departure_times[j]  # 当前城市的出发时间
            print(f"从 {city1} 到 {city2}:")
            print(f"  运输方式: {mode}")
            print(f"  距离: {distance} 公里")
            print(f"  时间: {time:.2f} 小时")
            print(f"  成本: {cost:.2f} 元")
            print(f"  出发时间: {departure_time}")
            temp_mode.append(mode)
            if j > 0:  # 为之后的城市打印转运时间、等待时间和转运等待时间
                # 安全检查，确保索引有效
                # transfer_time_str = f"{transfer_times[j - 1]:.2f}" if j - 1 < len(transfer_times) else "数据不可用"
                # transfer_time_str = f"{transfer_times[j - 1]:.2f}" if j - 1 < len(transfer_times) else "数据不可用"
                transfer_time_str = contain(temp_mode)
                transfer_time_str2 = round(transfer_time_str, 2)
                # 保留小数点后两位，不再只取小数点后的部分
                waiting_time = waiting_times[j - 1] if j - 1 < len(waiting_times) else "数据不可用"
                ralation_time = count_ralation_time(temp_mode)
                # print(f"  等待时间(没有加相关检查时间): {round(waiting_time,2)} 小时")
                if isinstance(waiting_time, float):
                    waiting_time_str = round(waiting_time + ralation_time, 2)  # 直接格式化为小数点后两位
                else:
                    waiting_time_str = waiting_time  # 如果不是float类型（例如"数据不可用"），则直接使用原值
                # transshipment_waiting_time_str = f"{transshipment_waiting_times[j ]:.2f}" if j  < len(
                # transshipment_waiting_times) else "数据不可用"
                # transshipment_waiting_time_str = str(round(float(transshipment_waiting_time_str) + ralation_time,2))
                transshipment_waiting_time_str = round(contain_wait_time(temp_mode), 2)
                temp_waiting_time = float(waiting_time_str)
                temp_transshipment_waiting_time = float(transshipment_waiting_time_str)
                print(f"  转运时间: {transfer_time_str2} 小时")
                # print(f"  等待时间: {waiting_time_str} 小时")  # 直接打印完整的等待时间
                print(f"  等待时间: {ralation_time} 小时")  # 直接打印完整的等待时间
                print(f"  转运等待时间: {transshipment_waiting_time_str}小时")  # 针对路径中的下一城市的转运等待时间

        # mode_all.append(temp_mode)
        print("转运总时间:", transfer_time_str, "小时")
        # print("等待总时间:", total_waiting_time, "小时")
        # print("等待总时间:", temp_waiting_time + temp_transshipment_waiting_time, "小时")
        print("等待总时间:", count_ralation_time(temp_mode) + temp_transshipment_waiting_time, "小时")

        # 使用matplotlib绘制Pareto最优解集的三维关系图
        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')  # 创建3D图形的轴

        # 绘制三维散点图
        scatter = ax.scatter(transport_times, transport_costs, co2_emissions, c='blue', marker='o',
                             label='Pareto Optimal Solutions')

        # 添加图表标题和轴标签
        ax.set_title('Pareto Optimal Set: Transport Time vs Cost vs CO2 Emissions')
        ax.set_xlabel('Transport Time (Hours)')
        ax.set_ylabel('Transport Cost (Units)')
        ax.set_zlabel('CO2 Emissions (Units)')

        # 显示图例
        plt.legend()

        # 显示图形
        plt.show()
